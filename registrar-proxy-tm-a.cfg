#
# $Id$
#
# this example shows use of ser as a registrar server
#

# ------------------ module loading ----------------------------------

debug=2            # debug level
fork=yes
log_stderror=yes
listen=127.0.0.1:5060

#set module path
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"


loadmodule "sl.so"
loadmodule "pv.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "xlog.so"
loadmodule "textops.so"
modparam("xlog", "buf_size", 8192)

# -------------------------  request routing logic -------------------
# main routing logic

request_route{
	xlog("L_INFO", "Received request ($rm) from ($fu)\n");

	if (t_check_trans()) {
		xlog("L_INFO", "route - An existing transaction\n");
	}
 	#Garantir que apenas utilizadores cujo domínio de origem ($fd) seja acme.pt possam interagir com o servidor.
 	if ($fd != "acme.pt") {
    		xlog("L_INFO", "Forbidden: Origin domain ($fd) not allowed\n");
    		sl_send_reply("403", "Forbidden: Invalid domain");
    		exit;
	}
 
	if (method == "REGISTER" && $fd != "acme.pt") {
		xlog("L_INFO", "Wrong domain for registration");
		exit;
	}

	# With addition of $rd == acme.pt only acme.pt domain will be registered
	if (method == "REGISTER" && $fd == "acme.pt") {
		xlog("L_INFO", "REGISTER with AoR ($tu) and Contact ($ct)\n");
		save("location");
		exit;	
	} 
	
	#Pedido encaminhado com SIP para funcionários dentro de acme.pt
    	if (method == "INVITE") {
        	xlog("L_INFO", "INVITE from ($fu) to ($tu)\n");
        	if ($tu =~ ".+@acme.pt") {
            		if (!lookup("location")) {
                		xlog("L_INFO", "Destination not found in location database: $tu\n");
                		sl_send_reply("404", "Not Found"); 
                		exit;
           		 } else {
                		xlog("L_INFO", "Re-routing INVITE to registered location\n");
                		t_relay(); 
                		exit;
           		 }
       		 } else {
            		xlog("L_INFO", "Forbidden: Destination domain not allowed\n");
            		sl_send_reply("403", "Forbidden");
            		exit;
        	}
    	}

	if (is_method("ACK")) {
		xlog("L_INFO", "ACK from ($fu)\n");
        if (loose_route()) t_relay();
	}

	if (is_method("CANCEL")) {
		xlog("L_INFO", "CANCEL from ($fu)\n");
		t_relay();
	}

	if (is_method("BYE")) {
		xlog("L_INFO", "BYE from ($fu)\n");
		if (loose_route()) t_relay();
	}
}

onreply_route{
	if (t_check_trans()) {
		xlog("L_INFO", "reply - An existing transaction\n");
	}    
	xlog("L_INFO", "($rs) Reply to request from ($fu)\n");
}
