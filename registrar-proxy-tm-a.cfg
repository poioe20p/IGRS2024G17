debug=2
fork=yes
log_stderror=yes
listen=127.0.0.10:5060

#set module path
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "xlog.so"
loadmodule "textops.so"
loadmodule "pv.so"
loadmodule "corex.so"
loadmodule "htable.so"
# loadmodule "dialog.so"

modparam("xlog", "buf_size", 8192)
# modparam("tm", "branch_max", 10)
modparam("htable", "htable", "callers=>size=8;")

# -------------------------  request routing logic -------------------
# main routing logic

request_route {
    xlog("L_INFO", "Received request ($rm) from ($fu)\n");

    if (t_check_trans()) {
        xlog("L_INFO", "User in call ($tu)\nFowarding to annoucements\n");
        append_branch("sip:ann@127.0.0.1:5080");
        t_relay();
        exit;
    }

    # Ensure only users with origin domain ($fd) acme.pt can interact with the server
    if ($fd != "acme.pt") {
        xlog("L_INFO", "Forbidden: Origin domain ($fd) not allowed\n");
        sl_send_reply("403", "Forbidden: Invalid domain");
        exit;
    }

    if (is_method("INVITE") && $ru == "sip:sala1@127.0.0.1:5090") {
        if ($fd == "acme.pt") {
            # Adicionar o chamador na htable
            $sht(callers=>$fu) = 1;
            xlog("L_INFO", "Adicionado chamador ($fu) na HTable callers.\n");
            t_relay();
            exit;
        } else {
            xlog("L_INFO", "Chamada para ann@acme.pt bloqueada. Origem: ($fu@$fd)\n");
            sl_send_reply("403", "Forbidden");
            exit;
        }
    }

    if (is_method("BYE")) {
        xlog("L_INFO", "BYE from ($fu)\n");
        
        # Verifica se o chamador está presente na htable "callers"
        if ($sht(callers=>$fu)) {
            # Remove o chamador da htable
            sht_rm("callers", $fu);
            xlog("L_INFO", "Removido chamador ($fu) da HTable callers.\n");
        }

        # Mantém sua lógica de encaminhamento se for loose_route
        if (loose_route()) {
            t_relay();
        }
        exit;
    }

    if (method == "REGISTER" && $fd != "acme.pt") {
        xlog("L_INFO", "Wrong domain for registration\n");
        sl_send_reply("403", "Forbidden: Invalid domain");
        exit;
    }

    if (method == "REGISTER" && $fd == "acme.pt") {
        if ($hdr(Expires) == "0" || $hdr(Contact) =~ "expires=0") {
            xlog("L_INFO", "Unregistering AoR ($tu) and Contact ($ct)\n");
            sl_send_reply("200", "OK, user unregistered successfully");
            exit;
        } else {
            xlog("L_INFO", "REGISTER with AoR ($tu) and Contact ($ct)\n");
            sl_send_reply("200", "OK, user registered successfully");
            save("location");
            exit;
        }
    }

    if (method == "INVITE") {
        xlog("L_INFO", "INVITE from ($fu) to ($tu)\n");
        if ($tu =~ ".+@acme.pt") {   # belongs to local domain
            if (!lookup("location")) {
                xlog("L_INFO", "Destination not found in location database: $tu\n");
                if ($fd == "acme.pt") {
                    sl_send_reply("404", "User in domain but not registered");
                } else {
                    sl_send_reply("403", "Forbidden");
                }
            } else {
                xlog("L_INFO", "Forwarding");
                sl_send_reply("200", "Forwarding call to $tu");
                t_relay();
            }
        } else {
            sl_send_reply("403", "Forbidden");
            exit;
        }
    }

    if (is_method("ACK")) {
        xlog("L_INFO", "ACK from ($fu)\n");
        if (loose_route()) {
            t_relay();
        }
    }

    if (is_method("CANCEL")) {
        xlog("L_INFO", "CANCEL from ($fu)\n");
        t_relay();
    }

    # Default action for other methods
    # sl_send_reply("405", "Method Not Allowed");
}

onreply_route {
    if (t_check_trans()) {
        xlog("L_INFO", "reply - An existing transaction\n");
        xlog("L_INFO", "Received reply ($rs) from ($fu)\n");
    }
}
