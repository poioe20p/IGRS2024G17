debug=2
fork=yes
log_stderror=yes
listen=127.0.0.10:5060

#set module path
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "xlog.so"
loadmodule "textops.so"
loadmodule "pv.so"

modparam("xlog", "buf_size", 8192)

# -------------------------  request routing logic -------------------
# main routing logic

request_route {
    xlog("L_INFO", "Received request ($rm) from ($fu)\n");

    if (t_check_trans()) {
        xlog("L_INFO", "route - An existing transaction\n");
        return;
    }

    # Ensure only users with origin domain ($fd) acme.pt can interact with the server
    if ($fd != "acme.pt") {
        xlog("L_INFO", "Forbidden: Origin domain ($fd) not allowed\n");
        sl_send_reply("403", "Forbidden: Invalid domain");
        exit;
    }

    if (method == "REGISTER" && $fd != "acme.pt") {
        xlog("L_INFO", "Wrong domain for registration\n");
        sl_send_reply("403", "Forbidden: Invalid domain");
        exit;
    } 
	
	
	# if (method == "REGISTER" && $fd == "acme.pt") {
	# 	xlog("L_INFO", "REGISTER from ($fu)\n");
	# 	save("location");
	# 	sl_send_reply("200", "OK");
	# 	exit;
	# }

    if (method == "REGISTER" && $fd == "acme.pt") {
        if ($hdr(Expires) == "0" || $hdr(Contact) =~ "expires=0") {
            xlog("L_INFO", "Unregistering AoR ($tu) and Contact ($ct)\n");
            sl_send_reply("200", "OK, user unregistered successfully");
            exit;
        } else {
            xlog("L_INFO", "REGISTER with AoR ($tu) and Contact ($ct)\n");
            sl_send_reply("200", "OK, user registered successfully");
            save("location");
            exit;
        }
	}

    # Handle registration and unregistration for acme.pt domain
    # if (method == "REGISTER" && $fd == "acme.pt") {
    #     if ($hdr(Expires) == "0" || $au =~ "@acme.pt" && $hdr(Contact) =~ "expires=0") {
    #         xlog("L_INFO", "Unregistering AoR ($tu) and Contact ($ct)\n");
    #         remove("location");
    #     } else {
    #         xlog("L_INFO", "REGISTER with AoR ($tu) and Contact ($ct)\n");
    #         save("location");
    #     }
    #     return;
    # }

    # Handle INVITE requests
    if (method == "INVITE") {
        xlog("L_INFO", "INVITE from ($fu) to ($tu)\n");
        if ($tu =~ ".+@acme.pt") {   # belongs to local domain
            if (!lookup("location")) {
                xlog("L_INFO", "Destination not found in location database: $tu\n");
                sl_send_reply("404", "User in domain but not registered");
            } else {
     #           record_route();
				xlog("L_INFO", "Forwarding");
                sl_send_reply("200", "Forwarding call to $tu");
				forward();
            }
        } else {
       #     record_route();
           sl_send_reply("403", "Forbidden");
           exit;
        }
    }

    if (is_method("ACK")) {
        xlog("L_INFO", "ACK from ($fu)\n");
		lookup("location");
		forward();
    }

    if (is_method("CANCEL")) {
        xlog("L_INFO", "CANCEL from ($fu)\n");
		lookup("location");
		forward();
    }

    if (is_method("BYE")) {
        xlog("L_INFO", "BYE from ($fu)\n");
        lookup("location");
		forward();
    }

    # Default action for other methods
    # sl_send_reply("405", "Method Not Allowed");

}

onreply_route {
	if (t_check_trans()) {
		xlog("L_INFO", "reply - An existing transaction\n");
		xlog("L_INFO", "Received reply ($rs) from ($fu)\n");
	}
}